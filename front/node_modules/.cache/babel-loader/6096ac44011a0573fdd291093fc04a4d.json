{"ast":null,"code":"import axios from 'axios';\naxios.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.token) {\n    const token = 'Bearer ' + user.token;\n    config.headers.Authorization = token;\n  }\n\n  return config;\n});\n\nclass AdminService {\n  async getCustomerByEmail(email) {\n    return await axios.get('http://localhost:8080/admin/get-customer-by-email/' + email);\n  }\n\n  async getCompanyByEmail(email) {\n    return await axios.get('http://localhost:8080/admin/get-company-by-email/' + email);\n  }\n\n  async getCoupons() {\n    return await axios.get('http://localhost:8080/admin/get-all-coupons');\n  }\n\n  async getOneCustomerByCustomerId(customerId) {\n    return await axios.get('http://localhost:8080/admin/get-one-customer-by-customerId/' + customerId);\n  }\n\n  async getAllCustomers() {\n    return await axios.get('http://localhost:8080/admin/get-all-customers');\n  }\n\n  async deleteCustomer(customerId) {\n    return await axios.delete('http://localhost:8080/admin/delete-customer/' + customerId);\n  }\n\n  async updateCustomer(id, firstName, lastName, email, password) {\n    return await axios.put('http://localhost:8080/admin/update-customer', {\n      id,\n      firstName,\n      lastName,\n      email,\n      password\n    });\n  }\n\n  async addCustomer(firstName, lastName, email, password) {\n    return await axios.post('http://localhost:8080/admin/add-customer', {\n      firstName,\n      lastName,\n      email,\n      password\n    });\n  }\n\n  async getOneCompanyByCompanyId(companyId) {\n    return await axios.get('http://localhost:8080/admin/get-one-company-by-companyId/' + companyId);\n  }\n\n  async getAllCompanies() {\n    return await axios.get('http://localhost:8080/admin/get-all-companies');\n  }\n\n  async deleteCompany(companyId) {\n    return await axios.delete('http://localhost:8080/admin/delete-company/' + companyId);\n  }\n\n  async updateCompany(id, name, email, password) {\n    return await axios.put('http://localhost:8080/admin/update-company', {\n      id,\n      name,\n      email,\n      password\n    });\n  }\n\n  async addCompany(name, email, password) {\n    return await axios.post('http://localhost:8080/admin/add-company', {\n      name,\n      email,\n      password\n    });\n  }\n\n  async getLogs() {\n    return await axios.get('http://localhost:8080/admin/get-logs');\n  }\n\n  async clearLogs() {\n    return await axios.delete('http://localhost:8080/admin/clear-logs');\n  }\n\n}\n\nexport default new AdminService();","map":{"version":3,"sources":["C:/Users/Johnnie/Desktop/couponproject/couponproject/src/service/AdminService.js"],"names":["axios","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","headers","Authorization","AdminService","getCustomerByEmail","email","get","getCompanyByEmail","getCoupons","getOneCustomerByCustomerId","customerId","getAllCustomers","deleteCustomer","delete","updateCustomer","id","firstName","lastName","password","put","addCustomer","post","getOneCompanyByCompanyId","companyId","getAllCompanies","deleteCompany","updateCompany","name","addCompany","getLogs","clearLogs"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\naxios.interceptors.request.use(config => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user && user.token) {\r\n        const token = 'Bearer ' + user.token;\r\n        config.headers.Authorization = token;\r\n    }\r\n    return config;\r\n});\r\nclass AdminService {\r\n    async getCustomerByEmail(email) {\r\n        return await axios.get('http://localhost:8080/admin/get-customer-by-email/' + email)\r\n    }\r\n    async getCompanyByEmail(email) {\r\n        return await axios.get('http://localhost:8080/admin/get-company-by-email/' + email)\r\n    }\r\n    async getCoupons() {\r\n        return await axios.get('http://localhost:8080/admin/get-all-coupons')\r\n    }\r\n    async getOneCustomerByCustomerId(customerId) {\r\n        return await axios.get('http://localhost:8080/admin/get-one-customer-by-customerId/' + customerId)\r\n    }\r\n    async getAllCustomers() {\r\n        return await axios.get('http://localhost:8080/admin/get-all-customers')\r\n    }\r\n    async deleteCustomer(customerId) {\r\n        return await axios.delete('http://localhost:8080/admin/delete-customer/' + customerId)\r\n    }\r\n    async updateCustomer(id, firstName, lastName, email, password) {\r\n        return await axios.put('http://localhost:8080/admin/update-customer', {\r\n            id, firstName, lastName, email, password\r\n        })\r\n    }\r\n    async addCustomer(firstName, lastName, email, password) {\r\n        return await axios.post('http://localhost:8080/admin/add-customer', {\r\n            firstName, lastName, email, password\r\n        })\r\n    }\r\n    async getOneCompanyByCompanyId(companyId) {\r\n        return await axios.get('http://localhost:8080/admin/get-one-company-by-companyId/' + companyId)\r\n    }\r\n    async getAllCompanies() {\r\n        return await axios.get('http://localhost:8080/admin/get-all-companies')\r\n    }\r\n    async deleteCompany(companyId) {\r\n        return await axios.delete('http://localhost:8080/admin/delete-company/' + companyId)\r\n    }\r\n    async updateCompany(id, name, email, password) {\r\n        return await axios.put('http://localhost:8080/admin/update-company', {\r\n            id, name, email, password\r\n        })\r\n    }\r\n    async addCompany(name, email, password) {\r\n        return await axios.post('http://localhost:8080/admin/add-company', {\r\n            name, email, password\r\n        })\r\n    }\r\n\r\n    async getLogs() {\r\n        return await axios.get('http://localhost:8080/admin/get-logs')\r\n    }\r\n\r\n    async clearLogs() {\r\n        return await axios.delete('http://localhost:8080/admin/clear-logs')\r\n    }\r\n}\r\nexport default new AdminService();\r\n\r\n"]},"metadata":{},"sourceType":"module"}