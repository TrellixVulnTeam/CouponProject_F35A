{"ast":null,"code":"import axios from 'axios';\naxios.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.token) {\n    const token = 'Bearer ' + user.token;\n    config.headers.Authorization = token;\n  }\n\n  return config;\n});\n\nclass CompanyService {\n  async getCompanyDetails() {\n    return await axios.get('http://localhost:8080/company/get-company-details');\n  }\n\n  async getCompanyCouponsByMaxPrice(maxPrice) {\n    return await axios.get('http://localhost:8080/company/get-company-coupons-by-max-price/' + maxPrice);\n  }\n\n  async getCompanyCouponsByCategory(category) {\n    return await axios.get('http://localhost:8080/company/get-company-coupons-by-category/' + category);\n  }\n\n  async getCompanyCoupons() {\n    return await axios.get('http://localhost:8080/company/get-company-coupons');\n  }\n\n  async deleteCompanyCoupon(couponId) {\n    return await axios.delete('http://localhost:8080/company/delete-company-coupon/' + couponId);\n  }\n\n  async updateCompanyCoupon(id, company, category, title, description, startDate, endDate, amount, price, image) {\n    return await axios.put('http://localhost:8080/company/update-company-coupon', {\n      id,\n      company,\n      category,\n      title,\n      description,\n      startDate,\n      endDate,\n      amount,\n      price,\n      image\n    });\n  }\n\n  async addCompanyCoupon(id, company, category, title, description, startDate, endDate, amount, price, image) {\n    return await axios.post('http://localhost:8080/company/add-company-coupon', {\n      id,\n      company,\n      category,\n      title,\n      description,\n      startDate,\n      endDate,\n      amount,\n      price,\n      image\n    });\n  }\n\n}\n\nexport default new CompanyService();","map":{"version":3,"sources":["C:/Users/Johnnie/Desktop/couponproject/couponproject/src/service/CompanyService.js"],"names":["axios","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","headers","Authorization","CompanyService","getCompanyDetails","get","getCompanyCouponsByMaxPrice","maxPrice","getCompanyCouponsByCategory","category","getCompanyCoupons","deleteCompanyCoupon","couponId","delete","updateCompanyCoupon","id","company","title","description","startDate","endDate","amount","price","image","put","addCompanyCoupon","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+BC,MAAM,IAAI;AACrC,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;;AACA,MAAIJ,IAAI,IAAIA,IAAI,CAACK,KAAjB,EAAwB;AACpB,UAAMA,KAAK,GAAG,YAAYL,IAAI,CAACK,KAA/B;AACAN,IAAAA,MAAM,CAACO,OAAP,CAAeC,aAAf,GAA+BF,KAA/B;AACH;;AACD,SAAON,MAAP;AACH,CAPD;;AAQA,MAAMS,cAAN,CAAqB;AACM,QAAjBC,iBAAiB,GAAG;AACtB,WAAO,MAAMd,KAAK,CAACe,GAAN,CAAU,mDAAV,CAAb;AACH;;AACgC,QAA3BC,2BAA2B,CAACC,QAAD,EAAW;AACxC,WAAO,MAAMjB,KAAK,CAACe,GAAN,CAAU,oEAAoEE,QAA9E,CAAb;AACH;;AACgC,QAA3BC,2BAA2B,CAACC,QAAD,EAAW;AACxC,WAAO,MAAMnB,KAAK,CAACe,GAAN,CAAU,mEAAmEI,QAA7E,CAAb;AACH;;AACsB,QAAjBC,iBAAiB,GAAG;AACtB,WAAO,MAAMpB,KAAK,CAACe,GAAN,CAAU,mDAAV,CAAb;AACH;;AACwB,QAAnBM,mBAAmB,CAACC,QAAD,EAAW;AAChC,WAAO,MAAMtB,KAAK,CAACuB,MAAN,CAAa,yDAAyDD,QAAtE,CAAb;AACH;;AACwB,QAAnBE,mBAAmB,CAACC,EAAD,EAAKC,OAAL,EAAcP,QAAd,EAAwBQ,KAAxB,EAA+BC,WAA/B,EAA4CC,SAA5C,EAAuDC,OAAvD,EAAgEC,MAAhE,EAAwEC,KAAxE,EAA+EC,KAA/E,EAAsF;AAC3G,WAAO,MAAMjC,KAAK,CAACkC,GAAN,CAAU,qDAAV,EAAiE;AAC1ET,MAAAA,EAD0E;AACtEC,MAAAA,OADsE;AAC7DP,MAAAA,QAD6D;AACnDQ,MAAAA,KADmD;AAC5CC,MAAAA,WAD4C;AAC/BC,MAAAA,SAD+B;AACpBC,MAAAA,OADoB;AACXC,MAAAA,MADW;AACHC,MAAAA,KADG;AACIC,MAAAA;AADJ,KAAjE,CAAb;AAGH;;AACqB,QAAhBE,gBAAgB,CAACV,EAAD,EAAKC,OAAL,EAAcP,QAAd,EAAwBQ,KAAxB,EAA+BC,WAA/B,EAA4CC,SAA5C,EAAuDC,OAAvD,EAAgEC,MAAhE,EAAwEC,KAAxE,EAA+EC,KAA/E,EAAsF;AACxG,WAAO,MAAMjC,KAAK,CAACoC,IAAN,CAAW,kDAAX,EAA+D;AACxEX,MAAAA,EADwE;AACpEC,MAAAA,OADoE;AAC3DP,MAAAA,QAD2D;AACjDQ,MAAAA,KADiD;AAC1CC,MAAAA,WAD0C;AAC7BC,MAAAA,SAD6B;AAClBC,MAAAA,OADkB;AACTC,MAAAA,MADS;AACDC,MAAAA,KADC;AACMC,MAAAA;AADN,KAA/D,CAAb;AAGH;;AAzBgB;;AA2BrB,eAAe,IAAIpB,cAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\n\r\naxios.interceptors.request.use(config => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user && user.token) {\r\n        const token = 'Bearer ' + user.token;\r\n        config.headers.Authorization = token;\r\n    }\r\n    return config;\r\n});\r\nclass CompanyService {\r\n    async getCompanyDetails() {\r\n        return await axios.get('http://localhost:8080/company/get-company-details')\r\n    }\r\n    async getCompanyCouponsByMaxPrice(maxPrice) {\r\n        return await axios.get('http://localhost:8080/company/get-company-coupons-by-max-price/' + maxPrice)\r\n    }\r\n    async getCompanyCouponsByCategory(category) {\r\n        return await axios.get('http://localhost:8080/company/get-company-coupons-by-category/' + category)\r\n    }\r\n    async getCompanyCoupons() {\r\n        return await axios.get('http://localhost:8080/company/get-company-coupons')\r\n    }\r\n    async deleteCompanyCoupon(couponId) {\r\n        return await axios.delete('http://localhost:8080/company/delete-company-coupon/' + couponId)\r\n    }\r\n    async updateCompanyCoupon(id, company, category, title, description, startDate, endDate, amount, price, image) {\r\n        return await axios.put('http://localhost:8080/company/update-company-coupon', {\r\n            id, company, category, title, description, startDate, endDate, amount, price, image\r\n        })\r\n    }\r\n    async addCompanyCoupon(id, company, category, title, description, startDate, endDate, amount, price, image) {\r\n        return await axios.post('http://localhost:8080/company/add-company-coupon', {\r\n            id, company, category, title, description, startDate, endDate, amount, price, image\r\n        })\r\n    }\r\n}\r\nexport default new CompanyService();"]},"metadata":{},"sourceType":"module"}